// import * as THREE from 'three';
// import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
// import { GRID_SYSTEM, GRID_SIZE, BASE_HEIGHT } from './mainOld.txt';

// export function initializeScene() {
//   let scene: THREE.Scene;
//   let wideCam: THREE.PerspectiveCamera;
//   let frogCam: THREE.PerspectiveCamera;

//   scene = new THREE.Scene();

//   // Lights
//   const dirLigth = new THREE.DirectionalLight(0xffffff, 1);
//   dirLigth.position.set(0, 10, 0);
//   scene.add(dirLigth);

//   const ambientLight = new THREE.AmbientLight(0x404040, 0.2);
//   scene.add(ambientLight);

//   const hemiLight = new THREE.HemisphereLight(0xffffff, 0x080820, 1.3);
//   scene.add(hemiLight);

//   // Initialize cameras
//   wideCam = new THREE.PerspectiveCamera(
//     75,
//     window.innerWidth / window.innerHeight,
//     0.2,
//     1000
//   );

//   frogCam = new THREE.PerspectiveCamera(
//     45,
//     window.innerWidth / window.innerHeight,
//     0.1,
//     1000
//   );

//   // Initialize renderer
//   const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true }); // alpha: true for transparent background
//   renderer.shadowMap.enabled = true;
//   renderer.shadowMap.type = THREE.PCFSoftShadowMap;
//   renderer.setClearColor(0x000000, 0);

//   // Add helpers
//   const gridHelper = new THREE.GridHelper(GRID_SIZE, GRID_SIZE, 0xffff00);
//   gridHelper.position.y = 0.01;
//   scene.add(gridHelper);

//   const axesHelper = new THREE.AxesHelper(5);
//   scene.add(axesHelper);

//   // Set up wide camera
//   scene.add(wideCam);
//   wideCam.lookAt(0, 0, 0);
//   GRID_SYSTEM.placeObject(wideCam, 7, -4);
//   wideCam.position.y = 3.5;

//   // Set up renderer
//   renderer.setSize(window.innerWidth, window.innerHeight);
//   document.body.appendChild(renderer.domElement);

//   // Set up orbit controls
//   const controls = new OrbitControls(wideCam, renderer.domElement);
//   controls.target.y = BASE_HEIGHT;
//   controls.update();

//   // Window resize handler
//   function handleResize() {
//     wideCam.aspect = window.innerWidth / window.innerHeight;
//     frogCam.aspect = window.innerWidth / window.innerHeight;
//     wideCam.updateProjectionMatrix();
//     frogCam.updateProjectionMatrix();
//     renderer.setSize(window.innerWidth, window.innerHeight);
//   }

//   // Initialize resize listener
//   window.addEventListener('resize', handleResize);

//   return {
//     scene,
//     renderer,
//     wideCam,
//     frogCam,
//     controls,
//     handleResize,
//   };
// }
