import * as THREE from 'three';

/* Create the frog mesh and Group object */

export function createFrog(): THREE.Group {
  const frogGroup = new THREE.Group();

  // Colors
  const bodyColor = 0x2eaa61; // Green
  const eyeColor = 0xf1c40f; // Yellow

  // Body
  const body = new THREE.Mesh(
    new THREE.BoxGeometry(0.5, 0.3, 0.7),
    new THREE.MeshBasicMaterial({ color: bodyColor })
  );

  // Head (slightly wider than body)
  const head = new THREE.Mesh(
    new THREE.BoxGeometry(0.6, 0.25, 0.3),
    new THREE.MeshBasicMaterial({ color: bodyColor })
  );
  head.position.z = -0.4; // Move forward
  head.position.y = 0.05; // Slightly higher than body

  // Eyes (to show direction)
  const eyeGeometry = new THREE.SphereGeometry(0.1, 8, 8);
  const eyeMaterial = new THREE.MeshBasicMaterial({ color: eyeColor });

  const leftEye = new THREE.Mesh(eyeGeometry, eyeMaterial);
  leftEye.position.set(0.2, 0.15, -0.4);
  leftEye.scale.set(0.4, 0.4, 0.4);

  const rightEye = new THREE.Mesh(eyeGeometry, eyeMaterial);
  rightEye.position.set(-0.2, 0.15, -0.4);
  rightEye.scale.set(0.4, 0.4, 0.4);

  // Back legs (to show direction)
  const legGeometry = new THREE.BoxGeometry(0.15, 0.2, 0.3);
  const legMaterial = new THREE.MeshBasicMaterial({ color: bodyColor });

  const backLeftLeg = new THREE.Mesh(legGeometry, legMaterial);
  backLeftLeg.position.set(0.25, -0.15, 0.2);

  const backRightLeg = new THREE.Mesh(legGeometry, legMaterial);
  backRightLeg.position.set(-0.25, -0.15, 0.2);

  // Front legs (smaller)
  const frontLegGeometry = new THREE.BoxGeometry(0.1, 0.15, 0.2);

  const frontLeftLeg = new THREE.Mesh(frontLegGeometry, legMaterial);
  frontLeftLeg.position.set(0.2, -0.15, -0.2);

  const frontRightLeg = new THREE.Mesh(frontLegGeometry, legMaterial);
  frontRightLeg.position.set(-0.2, -0.15, -0.2);

  // Add all parts to group
  frogGroup.add(body);
  frogGroup.add(head);
  frogGroup.add(leftEye);
  frogGroup.add(rightEye);
  frogGroup.add(backLeftLeg);
  frogGroup.add(backRightLeg);
  frogGroup.add(frontLeftLeg);
  frogGroup.add(frontRightLeg);

  // Adjust final position
  frogGroup.position.y = 0.25; // Lift frog to sit on ground

  return frogGroup;
}

/*

export function createFrog(): THREE.Mesh {
  // const frogger = new THREE.Group();
  const frogMesh = new THREE.Mesh(
    new THREE.BoxGeometry(0.5, 0.5, 0.5),
    new THREE.MeshBasicMaterial({ color: 0x00ff00 })
  );
  frogMesh.position.y = 0.25;
  return frogMesh;
}
*/
// const loader = new FBXLoader();

// loader.load(
//   './Astronaut_Frog.fbx',
//   (object) => {
//     // Handle the loaded object
//     object.scale.setScalar(0.1);
//     scene.add(object);
//   },
//   (xhr) => {
//     // Optional: Handle loading progress
//     console.log((xhr.loaded / xhr.total) * 100 + '% loaded');
//   },
//   (error) => {
//     // Optional: Handle errors
//     console.error('An error occurred:', error);
//   }
// );

// /* Load the frog model */

// // Create an AnimationMixer
// let mixer;
// let frogModel;

// // Load the FBX model
// const loader = new FBXLoader();
// interface FBXLoaderProgressEvent extends ProgressEvent {
//   loaded: number;
//   total: number;
// }

// interface FBXLoaderErrorEvent extends ErrorEvent {
//   message: string;
// }

// loader.load(
//   './Astronaut_Frog.fbx',
//   function (fbx: THREE.Group) {
//     frogModel = fbx;

//     // FBX models are often very large, you might need to scale them down
//     frogModel.scale.setScalar(0.01);

//     // Check if the model has animations
//     if (fbx.animations && fbx.animations.length) {
//       console.log('Model has', fbx.animations.length, 'animations:');
//       fbx.animations.forEach((clip: THREE.AnimationClip, index: number) => {
//         console.log(`Animation ${index}: ${clip.name}`);
//         console.log('Duration:', clip.duration, 'seconds');
//         console.log('Tracks:', clip.tracks.length);

//         // Log what parts of the model can be animated
//         clip.tracks.forEach((track: THREE.KeyframeTrack) => {
//           console.log('Animated property:', track.name);
//         });
//       });

//       // Create an animation mixer
//       mixer = new THREE.AnimationMixer(frogModel);

//       // Play the first animation
//       const action = mixer.clipAction(fbx.animations[0]);
//       action.play();
//     } else {
//       console.log('Model has no animations');
//     }

//     // You can also inspect the skeleton
//     fbx.traverse((child: THREE.Object3D) => {
//       if ((child as THREE.Bone).isBone) {
//         console.log('Found bone:', child.name);
//       }
//     });

//     scene.add(frogModel);
//   },
//   // Progress callback
//   function (xhr: FBXLoaderProgressEvent) {
//     console.log((xhr.loaded / xhr.total) * 100 + '% loaded');
//   },
//   // Error callback
//   function (error: FBXLoaderErrorEvent) {
//     console.error('An error occurred loading the model:', error.message);
//   }
// );
